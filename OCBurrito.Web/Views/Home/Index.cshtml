@section stylesheets{
    <style>

    </style>

}


<div class="container" ng-controller="homeController as HCtrl">

    <br />
    <a href="#" onclick="getLocation()" id="gps" class="btn btn-primary left">GPS Location</a>
    <br />
    <br />

    <div class="list-group">
        <a href="#" class="list-group-item list-group-item-action active">
            <h4 class="list-group-item-heading text-center">Housing</h4>
            <p class="list-group-item-text text-center">You can easily find a web hosting company that offers the right mix of features and price for your applications</p>
        </a>
        <a href="#" class="list-group-item list-group-item-action">
            <h4 class="list-group-item-heading text-center">Faith Based Organizations</h4>
            <p class="list-group-item-text text-center">Get access to your local faith orginzations including housing options and criteria for acceptance</p>
        </a>
        <a href="#" class="list-group-item list-group-item-action active">
            <h4 class="list-group-item-heading text-center">Medical Services</h4>
            <p class="list-group-item-text text-center">Information regarding medical services that accept Medicare/MediCAL</p>
        </a>
        <a href="#" class="list-group-item list-group-item-action">
            <h4 class="list-group-item-heading text-center">Emergency Servies</h4>
            <p class="list-group-item-text text-center">5150 Hold info, emergency room locations, Crisis stabalization units, mobile health clinics, 24/7 chat resources</p>
        </a>
    </div>
</div>
<!-- Begin Google Map HTML-->
<div id="map"></div>
<!-- End Google Map HTML-->

@section scripts {
    <script type="text/javascript">

        (function () {
            "use strict"

            angular.module("OCApp").controller('homeController', HomeController);


            function HomeController($scope, $http, $uibModal) {
                var vm = this;
                vm.$scope = $scope;
                vm.modalOpen = _modalOpen
                vm.$uibModal = $uibModal;

                render();

                function render() {

                    //_modalOpen();

                }

                function _modalOpen(items) {

                    var modalInstance = $uibModal.open({
                        templateUrl: '/Content/ModalTemplates/LandingPageModal.html',
                        controller: 'ModalInstanceCtrl',
                        controllerAs: 'modalCtrl',
                        size: 'md',
                        backdrop: true,
                        windowClass: 'app-modal-window',
                        resolve: {
                            items: function () {
                                return vm.items;
                            }
                        }
                    });

                    modalInstance.result.then(function (selectedItem) {
                        vm.selected = selectedItem;
                    }, function () {
                        console.log('Modal dismissed at: ' + new Date());
                    });


                }
            }
        })();

        (function () {
            "use strict";

            angular.module('OCApp').controller('ModalInstanceCtrl', function ($scope, $uibModalInstance, items, $window) {
                var vm = this;
                vm.items = items;
                vm.selected = {
                    item: vm.items
                };

                vm.ok = function () {
                    $uibModalInstance.close(vm.selected.item);
                    console.log("ok")
                    $window.location = "/Home/IntakeForm"

                };

                vm.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                    console.log("cancel")
                };
            });


        })();
    </script>

    <script type="text/javascript">
        var x = document.getElementById("gps");

        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition);
            } else {
                x.innerHTML = "Geolocation is not supported by this browser.";
            }
        }

        function showPosition(position) {
            x.innerHTML = "Latitude: " + position.coords.latitude +
            "<br>Longitude: " + position.coords.longitude;
        }

        function initAutocomplete() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: -33.8688, lng: 151.2195 },
                zoom: 13,
                mapTypeId: 'roadmap'
            });

            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function (place) {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };

                    // Create a marker for each place.
                    markers.push(new google.maps.Marker({
                        map: map,
                        icon: icon,
                        title: place.name,
                        position: place.geometry.location
                    }));

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
            });
        }
    </script>


}